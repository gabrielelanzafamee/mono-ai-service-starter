# Build stage - use devel image for compilation
FROM nvidia/cuda:12.9.1-cudnn-devel-ubuntu24.04 AS builder

# Set the working directory
WORKDIR /app

# install python 3.12.9
RUN apt-get update && apt-get install -y python3.12 python3.12-dev python3.12-venv python3-pip
RUN ln -sf /usr/bin/python3.12 /usr/bin/python

# Install Poetry with break-system-packages flag to handle externally managed environment
RUN python3 --version
RUN python3 -m pip install --no-cache-dir --break-system-packages poetry

# Install pytorch and flash-attn with break-system-packages flag
RUN python3 -m pip install --break-system-packages torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124
RUN python3 -m pip install --break-system-packages flash-attn --no-build-isolation

# Production stage - use runtime image
FROM nvidia/cuda:12.9.1-cudnn-runtime-ubuntu24.04

# Set the working directory
WORKDIR /app

# install python 3.12.9
RUN apt-get update && apt-get install -y python3.12 python3.12-dev python3.12-venv python3-pip
RUN ln -sf /usr/bin/python3.12 /usr/bin/python

# Install Poetry with break-system-packages flag to handle externally managed environment
RUN python3 -m pip install --no-cache-dir --break-system-packages poetry

# Copy the compiled packages from builder stage
COPY --from=builder /usr/local/lib/python3.12/dist-packages /usr/local/lib/python3.12/dist-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy Poetry files first for better caching
COPY pyproject.toml poetry.lock* ./

# Install dependencies
RUN poetry env use python3
RUN poetry install --no-root --no-interaction --no-ansi

# Copy the rest of the application code
COPY . .

# Expose the port FastAPI will run on
EXPOSE 8000

# Entrypoint is the python, the user will choose what to run if the server or train/main.py
ENTRYPOINT ["poetry", "run"]